#============================#
#===== Database sttings =====#
#============================#

#oracle database settings
#jdbc.type=oracle
#jdbc.driver=oracle.jdbc.driver.OracleDriver
#jdbc.url=jdbc:oracle:thin:@127.0.0.1:1521:orcl
#jdbc.username=arch1
#jdbc.password=123456

#mysql database setting
jdbc.type=mysql
jdbc.driver=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/mysite?useUnicode=true&characterEncoding=utf-8
jdbc.username=root
jdbc.password=root

#pool settings
#初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
jdbc.pool.init=1
#最小连接池数量
jdbc.pool.minIdle=3
#最大连接池数量
jdbc.pool.maxActive=20

#获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
jdbc.maxWait=60000
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
jdbc.timeBetweenEvictionRunsMillis=60000
#配置一个连接在池中最小生存的时间，单位是毫秒
jdbc.minEvictableIdleTimeMillis=300000

#用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
jdbc.testSql=SELECT 'x' FROM DUAL
#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
jdbc.testWhileIdle=true
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
jdbc.testOnBorrow=false
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
jdbc.testOnReturn=false

#连接泄漏监测，关闭长时间不使用的连接
#打开removeAbandoned功能
jdbc.removeAbandoned=true
#1200秒，也就是20分钟
jdbc.removeAbandonedTimeout=1200
# 关闭abanded连接时输出错误日志
jdbc.logAbandoned=true

#统计监控信息log4j:记录JDBC执行的SQL;config:密码解密，多个用逗号隔开stat,log4j
jdbc.filters=log4j

#stat-filter监控配置
#慢SQL统计日志输出
jdbc.logSlowSql=true
#慢SQL统计，如果SQL执行时间超过一定时间则记录为慢SQL
jdbc.slowSqlMillis=3000
#合并SQL统计 例如select * from table t where t.id =1，会被变为select * from table t where t.id =？来统计
jdbc.mergeSql=true
#合并统计多个数据源，也可以使用JVM启动参数来配置 -Ddruid.useGlobalDataSourceStat=true
jdbc.useGlobalDataSourceStat=true